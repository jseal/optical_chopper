#ifndef LCD_H
#define LCD_H

#include "Configuration.h"

#include <stdio.h>
#include <stdbool.h>
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

#define LCD_COLS 20
#define LCD_ROWS 4

#define SPI_SS_bm             0x10 /*!< \brief Bit mask for the SS pin. */
#define SPI_MOSI_bm           0x20 /*!< \brief Bit mask for the MOSI pin. */
#define SPI_MISO_bm           0x40 /*!< \brief Bit mask for the MISO pin. */
#define SPI_SCK_bm            0x80 /*!< \brief Bit mask for the SCK pin. */
#define SOFTWARE_VERSION      "VERSION: 1.0_23APR14"

static const int CTRL_DELAY_US   = 500;
static const int LCD_WRITE_CMD   = 0x80;
static const int LCD_POS_CMD     = 0x8A;
static const int LCD_SYNC_CMD    = 0xF5;
static const int LCD_STARTUP_CMD = 0x90;
static const int LCD_STATUS_CMD  = 0xD0;
static const int LCD_MAX_COLS    = 20;

static const int SPIF_BIT = 0x80;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdWriteByte( SPI_t* device, register8_t data);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void SleepMsec( const int msec );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdStartup( SPI_t* device, char* buffer, int size, int line );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdWaitForAvailableSpace( SPI_t* device, const int bytes );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdReadBufferSpace( SPI_t* device, register8_t* data);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdClearDisplay( SPI_t* device );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdEnableDisplay( SPI_t* device, int state );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdBacklight( SPI_t* device, int state );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdWriteData(SPI_t* device, const char* buffer, uint8_t size, 
uint8_t row, uint8_t column );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//void InitializeClock();

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void InitializeSpi(void);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LcdWriteNumber( SPI_t* device, int row, int column, int size, int value );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void SetLaserRepRate( SPI_t* device, int value );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void SetClockFrequency( SPI_t* device, int value );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void WriteVersionInfoToEeprom( SPI_t* device);

#endif